/*
 * generated by Xtext 2.13.0
 */
package mx.infotec.dads.kukulkan.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class KukulkanGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DomainModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.domainModel");
		private final Assignment cEntitiesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEntitiesEntityParserRuleCall_0 = (RuleCall)cEntitiesAssignment.eContents().get(0);
		
		///**
		// * Domain Model Rule
		// */ domainModel:
		//	entities+=entity+;
		@Override public ParserRule getRule() { return rule; }
		
		//entities+=entity+
		public Assignment getEntitiesAssignment() { return cEntitiesAssignment; }
		
		//entity
		public RuleCall getEntitiesEntityParserRuleCall_0() { return cEntitiesEntityParserRuleCall_0; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cENTITY_KEYWORDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cLPARENTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cTableNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTableNameIDTerminalRuleCall_2_1_0 = (RuleCall)cTableNameAssignment_2_1.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cLBRACETerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cFieldsAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cFieldsEntityFieldParserRuleCall_3_1_0_0 = (RuleCall)cFieldsAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_3_1_1_0 = (RuleCall)cGroup_3_1_1.eContents().get(0);
		private final Assignment cFieldsAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cFieldsEntityFieldParserRuleCall_3_1_1_1_0 = (RuleCall)cFieldsAssignment_3_1_1_1.eContents().get(0);
		private final RuleCall cRBRACETerminalRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		
		///** 
		// * Entity Rule
		// *  
		// */ entity:
		//	ENTITY_KEYWORD name=ID (LPAREN tableName=ID RPAREN)? (LBRACE (fields+=entityField (COMMA fields+=entityField)*)?
		//	RBRACE)?;
		@Override public ParserRule getRule() { return rule; }
		
		//ENTITY_KEYWORD name=ID (LPAREN tableName=ID RPAREN)? (LBRACE (fields+=entityField (COMMA fields+=entityField)*)?
		//RBRACE)?
		public Group getGroup() { return cGroup; }
		
		//ENTITY_KEYWORD
		public RuleCall getENTITY_KEYWORDTerminalRuleCall_0() { return cENTITY_KEYWORDTerminalRuleCall_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(LPAREN tableName=ID RPAREN)?
		public Group getGroup_2() { return cGroup_2; }
		
		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_2_0() { return cLPARENTerminalRuleCall_2_0; }
		
		//tableName=ID
		public Assignment getTableNameAssignment_2_1() { return cTableNameAssignment_2_1; }
		
		//ID
		public RuleCall getTableNameIDTerminalRuleCall_2_1_0() { return cTableNameIDTerminalRuleCall_2_1_0; }
		
		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_2_2() { return cRPARENTerminalRuleCall_2_2; }
		
		//(LBRACE (fields+=entityField (COMMA fields+=entityField)*)? RBRACE)?
		public Group getGroup_3() { return cGroup_3; }
		
		//LBRACE
		public RuleCall getLBRACETerminalRuleCall_3_0() { return cLBRACETerminalRuleCall_3_0; }
		
		//(fields+=entityField (COMMA fields+=entityField)*)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//fields+=entityField
		public Assignment getFieldsAssignment_3_1_0() { return cFieldsAssignment_3_1_0; }
		
		//entityField
		public RuleCall getFieldsEntityFieldParserRuleCall_3_1_0_0() { return cFieldsEntityFieldParserRuleCall_3_1_0_0; }
		
		//(COMMA fields+=entityField)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_3_1_1_0() { return cCOMMATerminalRuleCall_3_1_1_0; }
		
		//fields+=entityField
		public Assignment getFieldsAssignment_3_1_1_1() { return cFieldsAssignment_3_1_1_1; }
		
		//entityField
		public RuleCall getFieldsEntityFieldParserRuleCall_3_1_1_1_0() { return cFieldsEntityFieldParserRuleCall_3_1_1_1_0; }
		
		//RBRACE
		public RuleCall getRBRACETerminalRuleCall_3_2() { return cRBRACETerminalRuleCall_3_2; }
	}
	public class EntityFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.entityField");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssociationFieldParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///** 
		// * Entity Field Rule
		// *  
		// */ entityField:
		//	primitiveField
		//	| associationField;
		@Override public ParserRule getRule() { return rule; }
		
		//primitiveField | associationField
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//primitiveField
		public RuleCall getPrimitiveFieldParserRuleCall_0() { return cPrimitiveFieldParserRuleCall_0; }
		
		//associationField
		public RuleCall getAssociationFieldParserRuleCall_1() { return cAssociationFieldParserRuleCall_1; }
	}
	public class PrimitiveFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.primitiveField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeFieldTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//primitiveField:
		//	id=ID SEMICOLON type=fieldType;
		@Override public ParserRule getRule() { return rule; }
		
		//id=ID SEMICOLON type=fieldType
		public Group getGroup() { return cGroup; }
		
		//id=ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1() { return cSEMICOLONTerminalRuleCall_1; }
		
		//type=fieldType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//fieldType
		public RuleCall getTypeFieldTypeParserRuleCall_2_0() { return cTypeFieldTypeParserRuleCall_2_0; }
	}
	public class FieldTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.fieldType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringFieldTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumericFieldTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanFieldTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDateFieldTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBlobFieldTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		///** 
		// * Field Type Rule
		// *  
		// */ fieldType:
		//	stringFieldType
		//	| numericFieldType
		//	| booleanFieldType
		//	| dateFieldType
		//	| blobFieldType;
		@Override public ParserRule getRule() { return rule; }
		
		//stringFieldType | numericFieldType | booleanFieldType | dateFieldType | blobFieldType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//stringFieldType
		public RuleCall getStringFieldTypeParserRuleCall_0() { return cStringFieldTypeParserRuleCall_0; }
		
		//numericFieldType
		public RuleCall getNumericFieldTypeParserRuleCall_1() { return cNumericFieldTypeParserRuleCall_1; }
		
		//booleanFieldType
		public RuleCall getBooleanFieldTypeParserRuleCall_2() { return cBooleanFieldTypeParserRuleCall_2; }
		
		//dateFieldType
		public RuleCall getDateFieldTypeParserRuleCall_3() { return cDateFieldTypeParserRuleCall_3; }
		
		//blobFieldType
		public RuleCall getBlobFieldTypeParserRuleCall_4() { return cBlobFieldTypeParserRuleCall_4; }
	}
	public class AssociationFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.associationField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeCardinalityParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cLPARENTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cToSourcePropertyNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cToSourcePropertyNameIDTerminalRuleCall_1_1_0 = (RuleCall)cToSourcePropertyNameAssignment_1_1.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cTargetEntityAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetEntityEntityCrossReference_4_0 = (CrossReference)cTargetEntityAssignment_4.eContents().get(0);
		private final RuleCall cTargetEntityEntityIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetEntityEntityCrossReference_4_0.eContents().get(1);
		
		///** 
		// * Entity Type Rule
		// *  
		// */ associationField:
		//	type=cardinality (LPAREN toSourcePropertyName=ID RPAREN)? id=ID SEMICOLON targetEntity=[entity];
		@Override public ParserRule getRule() { return rule; }
		
		//type=cardinality (LPAREN toSourcePropertyName=ID RPAREN)? id=ID SEMICOLON targetEntity=[entity]
		public Group getGroup() { return cGroup; }
		
		//type=cardinality
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//cardinality
		public RuleCall getTypeCardinalityParserRuleCall_0_0() { return cTypeCardinalityParserRuleCall_0_0; }
		
		//(LPAREN toSourcePropertyName=ID RPAREN)?
		public Group getGroup_1() { return cGroup_1; }
		
		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1_0() { return cLPARENTerminalRuleCall_1_0; }
		
		//toSourcePropertyName=ID
		public Assignment getToSourcePropertyNameAssignment_1_1() { return cToSourcePropertyNameAssignment_1_1; }
		
		//ID
		public RuleCall getToSourcePropertyNameIDTerminalRuleCall_1_1_0() { return cToSourcePropertyNameIDTerminalRuleCall_1_1_0; }
		
		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_1_2() { return cRPARENTerminalRuleCall_1_2; }
		
		//id=ID
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_2_0() { return cIdIDTerminalRuleCall_2_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_3() { return cSEMICOLONTerminalRuleCall_3; }
		
		//targetEntity=[entity]
		public Assignment getTargetEntityAssignment_4() { return cTargetEntityAssignment_4; }
		
		//[entity]
		public CrossReference getTargetEntityEntityCrossReference_4_0() { return cTargetEntityEntityCrossReference_4_0; }
		
		//ID
		public RuleCall getTargetEntityEntityIDTerminalRuleCall_4_0_1() { return cTargetEntityEntityIDTerminalRuleCall_4_0_1; }
	}
	public class StringFieldTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.stringFieldType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameStringTypeParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cConstraintsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstraintsStringValidatorsParserRuleCall_1_0 = (RuleCall)cConstraintsAssignment_1.eContents().get(0);
		
		///** 
		// * String Field Type Rule
		// *  
		// */ stringFieldType:
		//	name=stringType constraints+=stringValidators*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=stringType constraints+=stringValidators*
		public Group getGroup() { return cGroup; }
		
		//name=stringType
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//stringType
		public RuleCall getNameStringTypeParserRuleCall_0_0() { return cNameStringTypeParserRuleCall_0_0; }
		
		//constraints+=stringValidators*
		public Assignment getConstraintsAssignment_1() { return cConstraintsAssignment_1; }
		
		//stringValidators
		public RuleCall getConstraintsStringValidatorsParserRuleCall_1_0() { return cConstraintsStringValidatorsParserRuleCall_1_0; }
	}
	public class StringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.stringType");
		private final RuleCall cSTRING_KEYWORDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		///** 
		// * String Type Rule
		// *  
		// */ stringType:
		//	STRING_KEYWORD;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING_KEYWORD
		public RuleCall getSTRING_KEYWORDTerminalRuleCall() { return cSTRING_KEYWORDTerminalRuleCall; }
	}
	public class NumericFieldTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.numericFieldType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNumericTypesParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cConstraintsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstraintsNumericValidatorsParserRuleCall_1_0 = (RuleCall)cConstraintsAssignment_1.eContents().get(0);
		
		///** 
		// * Numeric Field Type Rule
		// *  
		// */ numericFieldType:
		//	name=numericTypes constraints+=numericValidators*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=numericTypes constraints+=numericValidators*
		public Group getGroup() { return cGroup; }
		
		//name=numericTypes
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//numericTypes
		public RuleCall getNameNumericTypesParserRuleCall_0_0() { return cNameNumericTypesParserRuleCall_0_0; }
		
		//constraints+=numericValidators*
		public Assignment getConstraintsAssignment_1() { return cConstraintsAssignment_1; }
		
		//numericValidators
		public RuleCall getConstraintsNumericValidatorsParserRuleCall_1_0() { return cConstraintsNumericValidatorsParserRuleCall_1_0; }
	}
	public class NumericTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.numericTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTEGERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLONGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBIG_DECIMALTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFLOATTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDOUBLETerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		///** 
		// * Numeric Types Rule
		// *  
		// */ numericTypes:
		//	INTEGER
		//	| LONG
		//	| BIG_DECIMAL
		//	| FLOAT
		//	| DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//INTEGER | LONG | BIG_DECIMAL | FLOAT | DOUBLE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INTEGER
		public RuleCall getINTEGERTerminalRuleCall_0() { return cINTEGERTerminalRuleCall_0; }
		
		//LONG
		public RuleCall getLONGTerminalRuleCall_1() { return cLONGTerminalRuleCall_1; }
		
		//BIG_DECIMAL
		public RuleCall getBIG_DECIMALTerminalRuleCall_2() { return cBIG_DECIMALTerminalRuleCall_2; }
		
		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_3() { return cFLOATTerminalRuleCall_3; }
		
		//DOUBLE
		public RuleCall getDOUBLETerminalRuleCall_4() { return cDOUBLETerminalRuleCall_4; }
	}
	public class BooleanFieldTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.booleanFieldType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameBOOLEAN_TYPETerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cRequiredAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRequiredRequiredValidatorParserRuleCall_1_0 = (RuleCall)cRequiredAssignment_1.eContents().get(0);
		
		///** 
		// * Boolean Field Type Token
		// *  
		// */ booleanFieldType:
		//	name=BOOLEAN_TYPE required=requiredValidator?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=BOOLEAN_TYPE required=requiredValidator?
		public Group getGroup() { return cGroup; }
		
		//name=BOOLEAN_TYPE
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//BOOLEAN_TYPE
		public RuleCall getNameBOOLEAN_TYPETerminalRuleCall_0_0() { return cNameBOOLEAN_TYPETerminalRuleCall_0_0; }
		
		//required=requiredValidator?
		public Assignment getRequiredAssignment_1() { return cRequiredAssignment_1; }
		
		//requiredValidator
		public RuleCall getRequiredRequiredValidatorParserRuleCall_1_0() { return cRequiredRequiredValidatorParserRuleCall_1_0; }
	}
	public class DateFieldTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.dateFieldType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeDateTypesParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cRequiredAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRequiredRequiredValidatorParserRuleCall_1_0 = (RuleCall)cRequiredAssignment_1.eContents().get(0);
		
		///** 
		// * Date Field Type Rule
		// *  
		// */ dateFieldType:
		//	type=dateTypes required=requiredValidator?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=dateTypes required=requiredValidator?
		public Group getGroup() { return cGroup; }
		
		//type=dateTypes
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//dateTypes
		public RuleCall getTypeDateTypesParserRuleCall_0_0() { return cTypeDateTypesParserRuleCall_0_0; }
		
		//required=requiredValidator?
		public Assignment getRequiredAssignment_1() { return cRequiredAssignment_1; }
		
		//requiredValidator
		public RuleCall getRequiredRequiredValidatorParserRuleCall_1_0() { return cRequiredRequiredValidatorParserRuleCall_1_0; }
	}
	public class DateTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.dateTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLOCAL_DATETerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cZONED_DATETIMETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINSTANTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		///** 
		// * Date Types Rule
		// *  
		// */ dateTypes:
		//	LOCAL_DATE
		//	| ZONED_DATETIME
		//	| INSTANT;
		@Override public ParserRule getRule() { return rule; }
		
		//LOCAL_DATE | ZONED_DATETIME | INSTANT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LOCAL_DATE
		public RuleCall getLOCAL_DATETerminalRuleCall_0() { return cLOCAL_DATETerminalRuleCall_0; }
		
		//ZONED_DATETIME
		public RuleCall getZONED_DATETIMETerminalRuleCall_1() { return cZONED_DATETIMETerminalRuleCall_1; }
		
		//INSTANT
		public RuleCall getINSTANTTerminalRuleCall_2() { return cINSTANTTerminalRuleCall_2; }
	}
	public class BlobFieldTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.blobFieldType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameBlobTypesParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cConstraintsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstraintsBlobValidatorsParserRuleCall_1_0 = (RuleCall)cConstraintsAssignment_1.eContents().get(0);
		
		///** 
		// * Blob Field Type Rule
		// *  
		// */ blobFieldType:
		//	name=blobTypes constraints+=blobValidators*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=blobTypes constraints+=blobValidators*
		public Group getGroup() { return cGroup; }
		
		//name=blobTypes
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//blobTypes
		public RuleCall getNameBlobTypesParserRuleCall_0_0() { return cNameBlobTypesParserRuleCall_0_0; }
		
		//constraints+=blobValidators*
		public Assignment getConstraintsAssignment_1() { return cConstraintsAssignment_1; }
		
		//blobValidators
		public RuleCall getConstraintsBlobValidatorsParserRuleCall_1_0() { return cConstraintsBlobValidatorsParserRuleCall_1_0; }
	}
	public class BlobTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.blobTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBLOBTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cANY_BLOBTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIMAGE_BLOBTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTEXT_BLOBTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		///** 
		// * Blob Types Rule
		// *  
		// */ blobTypes:
		//	BLOB
		//	| ANY_BLOB
		//	| IMAGE_BLOB
		//	| TEXT_BLOB;
		@Override public ParserRule getRule() { return rule; }
		
		//BLOB | ANY_BLOB | IMAGE_BLOB | TEXT_BLOB
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BLOB
		public RuleCall getBLOBTerminalRuleCall_0() { return cBLOBTerminalRuleCall_0; }
		
		//ANY_BLOB
		public RuleCall getANY_BLOBTerminalRuleCall_1() { return cANY_BLOBTerminalRuleCall_1; }
		
		//IMAGE_BLOB
		public RuleCall getIMAGE_BLOBTerminalRuleCall_2() { return cIMAGE_BLOBTerminalRuleCall_2; }
		
		//TEXT_BLOB
		public RuleCall getTEXT_BLOBTerminalRuleCall_3() { return cTEXT_BLOBTerminalRuleCall_3; }
	}
	public class StringValidatorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.stringValidators");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cRequiredAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cRequiredRequiredValidatorParserRuleCall_0_0 = (RuleCall)cRequiredAssignment_0.eContents().get(0);
		private final Assignment cMinLenghtAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cMinLenghtMinValidatorParserRuleCall_1_0 = (RuleCall)cMinLenghtAssignment_1.eContents().get(0);
		private final Assignment cMaxLenghtAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cMaxLenghtMaxValidatorParserRuleCall_2_0 = (RuleCall)cMaxLenghtAssignment_2.eContents().get(0);
		private final Assignment cPatternAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cPatternPatternValidatorParserRuleCall_3_0 = (RuleCall)cPatternAssignment_3.eContents().get(0);
		
		///* =========================================================================
		// * VALIDATOR
		// * ========================================================================= */ stringValidators:
		//	required=requiredValidator
		//	| minLenght=minValidator
		//	| maxLenght=maxValidator
		//	| pattern=patternValidator;
		@Override public ParserRule getRule() { return rule; }
		
		//required=requiredValidator | minLenght=minValidator | maxLenght=maxValidator | pattern=patternValidator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//required=requiredValidator
		public Assignment getRequiredAssignment_0() { return cRequiredAssignment_0; }
		
		//requiredValidator
		public RuleCall getRequiredRequiredValidatorParserRuleCall_0_0() { return cRequiredRequiredValidatorParserRuleCall_0_0; }
		
		//minLenght=minValidator
		public Assignment getMinLenghtAssignment_1() { return cMinLenghtAssignment_1; }
		
		//minValidator
		public RuleCall getMinLenghtMinValidatorParserRuleCall_1_0() { return cMinLenghtMinValidatorParserRuleCall_1_0; }
		
		//maxLenght=maxValidator
		public Assignment getMaxLenghtAssignment_2() { return cMaxLenghtAssignment_2; }
		
		//maxValidator
		public RuleCall getMaxLenghtMaxValidatorParserRuleCall_2_0() { return cMaxLenghtMaxValidatorParserRuleCall_2_0; }
		
		//pattern=patternValidator
		public Assignment getPatternAssignment_3() { return cPatternAssignment_3; }
		
		//patternValidator
		public RuleCall getPatternPatternValidatorParserRuleCall_3_0() { return cPatternPatternValidatorParserRuleCall_3_0; }
	}
	public class NumericValidatorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.numericValidators");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cRequiredAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cRequiredRequiredValidatorParserRuleCall_0_0 = (RuleCall)cRequiredAssignment_0.eContents().get(0);
		private final Assignment cMinValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cMinValueMinValidatorParserRuleCall_1_0 = (RuleCall)cMinValueAssignment_1.eContents().get(0);
		private final Assignment cMaxValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cMaxValueMaxValidatorParserRuleCall_2_0 = (RuleCall)cMaxValueAssignment_2.eContents().get(0);
		
		//numericValidators:
		//	required=requiredValidator
		//	| minValue=minValidator
		//	| maxValue=maxValidator;
		@Override public ParserRule getRule() { return rule; }
		
		//required=requiredValidator | minValue=minValidator | maxValue=maxValidator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//required=requiredValidator
		public Assignment getRequiredAssignment_0() { return cRequiredAssignment_0; }
		
		//requiredValidator
		public RuleCall getRequiredRequiredValidatorParserRuleCall_0_0() { return cRequiredRequiredValidatorParserRuleCall_0_0; }
		
		//minValue=minValidator
		public Assignment getMinValueAssignment_1() { return cMinValueAssignment_1; }
		
		//minValidator
		public RuleCall getMinValueMinValidatorParserRuleCall_1_0() { return cMinValueMinValidatorParserRuleCall_1_0; }
		
		//maxValue=maxValidator
		public Assignment getMaxValueAssignment_2() { return cMaxValueAssignment_2; }
		
		//maxValidator
		public RuleCall getMaxValueMaxValidatorParserRuleCall_2_0() { return cMaxValueMaxValidatorParserRuleCall_2_0; }
	}
	public class BlobValidatorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.blobValidators");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cRequiredAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cRequiredRequiredValidatorParserRuleCall_0_0 = (RuleCall)cRequiredAssignment_0.eContents().get(0);
		private final Assignment cMinBytesValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cMinBytesValueMinValidatorParserRuleCall_1_0 = (RuleCall)cMinBytesValueAssignment_1.eContents().get(0);
		private final Assignment cMaxBytesValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cMaxBytesValueMaxValidatorParserRuleCall_2_0 = (RuleCall)cMaxBytesValueAssignment_2.eContents().get(0);
		
		//blobValidators:
		//	required=requiredValidator
		//	| minBytesValue=minValidator
		//	| maxBytesValue=maxValidator;
		@Override public ParserRule getRule() { return rule; }
		
		//required=requiredValidator | minBytesValue=minValidator | maxBytesValue=maxValidator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//required=requiredValidator
		public Assignment getRequiredAssignment_0() { return cRequiredAssignment_0; }
		
		//requiredValidator
		public RuleCall getRequiredRequiredValidatorParserRuleCall_0_0() { return cRequiredRequiredValidatorParserRuleCall_0_0; }
		
		//minBytesValue=minValidator
		public Assignment getMinBytesValueAssignment_1() { return cMinBytesValueAssignment_1; }
		
		//minValidator
		public RuleCall getMinBytesValueMinValidatorParserRuleCall_1_0() { return cMinBytesValueMinValidatorParserRuleCall_1_0; }
		
		//maxBytesValue=maxValidator
		public Assignment getMaxBytesValueAssignment_2() { return cMaxBytesValueAssignment_2; }
		
		//maxValidator
		public RuleCall getMaxBytesValueMaxValidatorParserRuleCall_2_0() { return cMaxBytesValueMaxValidatorParserRuleCall_2_0; }
	}
	public class RequiredValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.requiredValidator");
		private final RuleCall cREQUIREDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//requiredValidator:
		//	REQUIRED;
		@Override public ParserRule getRule() { return rule; }
		
		//REQUIRED
		public RuleCall getREQUIREDTerminalRuleCall() { return cREQUIREDTerminalRuleCall; }
	}
	public class PatternValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.patternValidator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPATTERNTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cPATTERN_VALUETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cRPARENTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//patternValidator:
		//	PATTERN LPAREN PATTERN_VALUE RPAREN;
		@Override public ParserRule getRule() { return rule; }
		
		//PATTERN LPAREN PATTERN_VALUE RPAREN
		public Group getGroup() { return cGroup; }
		
		//PATTERN
		public RuleCall getPATTERNTerminalRuleCall_0() { return cPATTERNTerminalRuleCall_0; }
		
		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1() { return cLPARENTerminalRuleCall_1; }
		
		//PATTERN_VALUE
		public RuleCall getPATTERN_VALUETerminalRuleCall_2() { return cPATTERN_VALUETerminalRuleCall_2; }
		
		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_3() { return cRPARENTerminalRuleCall_3; }
	}
	public class MinValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.minValidator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMINTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cRPARENTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//minValidator:
		//	MIN LPAREN INT RPAREN;
		@Override public ParserRule getRule() { return rule; }
		
		//MIN LPAREN INT RPAREN
		public Group getGroup() { return cGroup; }
		
		//MIN
		public RuleCall getMINTerminalRuleCall_0() { return cMINTerminalRuleCall_0; }
		
		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1() { return cLPARENTerminalRuleCall_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_3() { return cRPARENTerminalRuleCall_3; }
	}
	public class MaxValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.maxValidator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMAXTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cRPARENTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//maxValidator:
		//	MAX LPAREN INT RPAREN;
		@Override public ParserRule getRule() { return rule; }
		
		//MAX LPAREN INT RPAREN
		public Group getGroup() { return cGroup; }
		
		//MAX
		public RuleCall getMAXTerminalRuleCall_0() { return cMAXTerminalRuleCall_0; }
		
		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1() { return cLPARENTerminalRuleCall_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_3() { return cRPARENTerminalRuleCall_3; }
	}
	public class CardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.cardinality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cONE_TO_MANYTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMANY_TO_ONETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cONE_TO_ONETerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMANY_TO_MANYTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//cardinality:
		//	ONE_TO_MANY
		//	| MANY_TO_ONE
		//	| ONE_TO_ONE
		//	| MANY_TO_MANY;
		@Override public ParserRule getRule() { return rule; }
		
		//ONE_TO_MANY | MANY_TO_ONE | ONE_TO_ONE | MANY_TO_MANY
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ONE_TO_MANY
		public RuleCall getONE_TO_MANYTerminalRuleCall_0() { return cONE_TO_MANYTerminalRuleCall_0; }
		
		//MANY_TO_ONE
		public RuleCall getMANY_TO_ONETerminalRuleCall_1() { return cMANY_TO_ONETerminalRuleCall_1; }
		
		//ONE_TO_ONE
		public RuleCall getONE_TO_ONETerminalRuleCall_2() { return cONE_TO_ONETerminalRuleCall_2; }
		
		//MANY_TO_MANY
		public RuleCall getMANY_TO_MANYTerminalRuleCall_3() { return cMANY_TO_MANYTerminalRuleCall_3; }
	}
	
	
	private final DomainModelElements pDomainModel;
	private final EntityElements pEntity;
	private final EntityFieldElements pEntityField;
	private final PrimitiveFieldElements pPrimitiveField;
	private final FieldTypeElements pFieldType;
	private final AssociationFieldElements pAssociationField;
	private final StringFieldTypeElements pStringFieldType;
	private final StringTypeElements pStringType;
	private final NumericFieldTypeElements pNumericFieldType;
	private final NumericTypesElements pNumericTypes;
	private final BooleanFieldTypeElements pBooleanFieldType;
	private final DateFieldTypeElements pDateFieldType;
	private final DateTypesElements pDateTypes;
	private final BlobFieldTypeElements pBlobFieldType;
	private final BlobTypesElements pBlobTypes;
	private final StringValidatorsElements pStringValidators;
	private final NumericValidatorsElements pNumericValidators;
	private final BlobValidatorsElements pBlobValidators;
	private final RequiredValidatorElements pRequiredValidator;
	private final PatternValidatorElements pPatternValidator;
	private final MinValidatorElements pMinValidator;
	private final MaxValidatorElements pMaxValidator;
	private final CardinalityElements pCardinality;
	private final TerminalRule tENTITY_KEYWORD;
	private final TerminalRule tSTRING_KEYWORD;
	private final TerminalRule tINTEGER;
	private final TerminalRule tLONG;
	private final TerminalRule tBIG_DECIMAL;
	private final TerminalRule tFLOAT;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tBOOLEAN_TYPE;
	private final TerminalRule tLOCAL_DATE;
	private final TerminalRule tZONED_DATETIME;
	private final TerminalRule tINSTANT;
	private final TerminalRule tBLOB;
	private final TerminalRule tANY_BLOB;
	private final TerminalRule tIMAGE_BLOB;
	private final TerminalRule tTEXT_BLOB;
	private final TerminalRule tONE_TO_MANY;
	private final TerminalRule tMANY_TO_ONE;
	private final TerminalRule tONE_TO_ONE;
	private final TerminalRule tMANY_TO_MANY;
	private final TerminalRule tPATTERN_VALUE;
	private final TerminalRule tMIN;
	private final TerminalRule tMAX;
	private final TerminalRule tNULL_LITERAL;
	private final TerminalRule tLPAREN;
	private final TerminalRule tRPAREN;
	private final TerminalRule tLBRACE;
	private final TerminalRule tRBRACE;
	private final TerminalRule tLBRACK;
	private final TerminalRule tRBRACK;
	private final TerminalRule tSEMI;
	private final TerminalRule tCOMMA;
	private final TerminalRule tDOT;
	private final TerminalRule tELLIPSIS;
	private final TerminalRule tAT;
	private final TerminalRule tCOLONCOLON;
	private final TerminalRule tSEMICOLON;
	private final TerminalRule tREQUIRED;
	private final TerminalRule tPATTERN;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public KukulkanGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDomainModel = new DomainModelElements();
		this.pEntity = new EntityElements();
		this.pEntityField = new EntityFieldElements();
		this.pPrimitiveField = new PrimitiveFieldElements();
		this.pFieldType = new FieldTypeElements();
		this.pAssociationField = new AssociationFieldElements();
		this.pStringFieldType = new StringFieldTypeElements();
		this.pStringType = new StringTypeElements();
		this.pNumericFieldType = new NumericFieldTypeElements();
		this.pNumericTypes = new NumericTypesElements();
		this.pBooleanFieldType = new BooleanFieldTypeElements();
		this.pDateFieldType = new DateFieldTypeElements();
		this.pDateTypes = new DateTypesElements();
		this.pBlobFieldType = new BlobFieldTypeElements();
		this.pBlobTypes = new BlobTypesElements();
		this.pStringValidators = new StringValidatorsElements();
		this.pNumericValidators = new NumericValidatorsElements();
		this.pBlobValidators = new BlobValidatorsElements();
		this.pRequiredValidator = new RequiredValidatorElements();
		this.pPatternValidator = new PatternValidatorElements();
		this.pMinValidator = new MinValidatorElements();
		this.pMaxValidator = new MaxValidatorElements();
		this.pCardinality = new CardinalityElements();
		this.tENTITY_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.ENTITY_KEYWORD");
		this.tSTRING_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.STRING_KEYWORD");
		this.tINTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.INTEGER");
		this.tLONG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.LONG");
		this.tBIG_DECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.BIG_DECIMAL");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.FLOAT");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.DOUBLE");
		this.tBOOLEAN_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.BOOLEAN_TYPE");
		this.tLOCAL_DATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.LOCAL_DATE");
		this.tZONED_DATETIME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.ZONED_DATETIME");
		this.tINSTANT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.INSTANT");
		this.tBLOB = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.BLOB");
		this.tANY_BLOB = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.ANY_BLOB");
		this.tIMAGE_BLOB = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.IMAGE_BLOB");
		this.tTEXT_BLOB = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.TEXT_BLOB");
		this.tONE_TO_MANY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.ONE_TO_MANY");
		this.tMANY_TO_ONE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.MANY_TO_ONE");
		this.tONE_TO_ONE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.ONE_TO_ONE");
		this.tMANY_TO_MANY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.MANY_TO_MANY");
		this.tPATTERN_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.PATTERN_VALUE");
		this.tMIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.MIN");
		this.tMAX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.MAX");
		this.tNULL_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.NULL_LITERAL");
		this.tLPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.LPAREN");
		this.tRPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.RPAREN");
		this.tLBRACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.LBRACE");
		this.tRBRACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.RBRACE");
		this.tLBRACK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.LBRACK");
		this.tRBRACK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.RBRACK");
		this.tSEMI = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.SEMI");
		this.tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.COMMA");
		this.tDOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.DOT");
		this.tELLIPSIS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.ELLIPSIS");
		this.tAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.AT");
		this.tCOLONCOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.COLONCOLON");
		this.tSEMICOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.SEMICOLON");
		this.tREQUIRED = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.REQUIRED");
		this.tPATTERN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.PATTERN");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("mx.infotec.dads.kukulkan.Kukulkan".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///**
	// * Domain Model Rule
	// */ domainModel:
	//	entities+=entity+;
	public DomainModelElements getDomainModelAccess() {
		return pDomainModel;
	}
	
	public ParserRule getDomainModelRule() {
		return getDomainModelAccess().getRule();
	}
	
	///** 
	// * Entity Rule
	// *  
	// */ entity:
	//	ENTITY_KEYWORD name=ID (LPAREN tableName=ID RPAREN)? (LBRACE (fields+=entityField (COMMA fields+=entityField)*)?
	//	RBRACE)?;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	///** 
	// * Entity Field Rule
	// *  
	// */ entityField:
	//	primitiveField
	//	| associationField;
	public EntityFieldElements getEntityFieldAccess() {
		return pEntityField;
	}
	
	public ParserRule getEntityFieldRule() {
		return getEntityFieldAccess().getRule();
	}
	
	//primitiveField:
	//	id=ID SEMICOLON type=fieldType;
	public PrimitiveFieldElements getPrimitiveFieldAccess() {
		return pPrimitiveField;
	}
	
	public ParserRule getPrimitiveFieldRule() {
		return getPrimitiveFieldAccess().getRule();
	}
	
	///** 
	// * Field Type Rule
	// *  
	// */ fieldType:
	//	stringFieldType
	//	| numericFieldType
	//	| booleanFieldType
	//	| dateFieldType
	//	| blobFieldType;
	public FieldTypeElements getFieldTypeAccess() {
		return pFieldType;
	}
	
	public ParserRule getFieldTypeRule() {
		return getFieldTypeAccess().getRule();
	}
	
	///** 
	// * Entity Type Rule
	// *  
	// */ associationField:
	//	type=cardinality (LPAREN toSourcePropertyName=ID RPAREN)? id=ID SEMICOLON targetEntity=[entity];
	public AssociationFieldElements getAssociationFieldAccess() {
		return pAssociationField;
	}
	
	public ParserRule getAssociationFieldRule() {
		return getAssociationFieldAccess().getRule();
	}
	
	///** 
	// * String Field Type Rule
	// *  
	// */ stringFieldType:
	//	name=stringType constraints+=stringValidators*;
	public StringFieldTypeElements getStringFieldTypeAccess() {
		return pStringFieldType;
	}
	
	public ParserRule getStringFieldTypeRule() {
		return getStringFieldTypeAccess().getRule();
	}
	
	///** 
	// * String Type Rule
	// *  
	// */ stringType:
	//	STRING_KEYWORD;
	public StringTypeElements getStringTypeAccess() {
		return pStringType;
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}
	
	///** 
	// * Numeric Field Type Rule
	// *  
	// */ numericFieldType:
	//	name=numericTypes constraints+=numericValidators*;
	public NumericFieldTypeElements getNumericFieldTypeAccess() {
		return pNumericFieldType;
	}
	
	public ParserRule getNumericFieldTypeRule() {
		return getNumericFieldTypeAccess().getRule();
	}
	
	///** 
	// * Numeric Types Rule
	// *  
	// */ numericTypes:
	//	INTEGER
	//	| LONG
	//	| BIG_DECIMAL
	//	| FLOAT
	//	| DOUBLE;
	public NumericTypesElements getNumericTypesAccess() {
		return pNumericTypes;
	}
	
	public ParserRule getNumericTypesRule() {
		return getNumericTypesAccess().getRule();
	}
	
	///** 
	// * Boolean Field Type Token
	// *  
	// */ booleanFieldType:
	//	name=BOOLEAN_TYPE required=requiredValidator?;
	public BooleanFieldTypeElements getBooleanFieldTypeAccess() {
		return pBooleanFieldType;
	}
	
	public ParserRule getBooleanFieldTypeRule() {
		return getBooleanFieldTypeAccess().getRule();
	}
	
	///** 
	// * Date Field Type Rule
	// *  
	// */ dateFieldType:
	//	type=dateTypes required=requiredValidator?;
	public DateFieldTypeElements getDateFieldTypeAccess() {
		return pDateFieldType;
	}
	
	public ParserRule getDateFieldTypeRule() {
		return getDateFieldTypeAccess().getRule();
	}
	
	///** 
	// * Date Types Rule
	// *  
	// */ dateTypes:
	//	LOCAL_DATE
	//	| ZONED_DATETIME
	//	| INSTANT;
	public DateTypesElements getDateTypesAccess() {
		return pDateTypes;
	}
	
	public ParserRule getDateTypesRule() {
		return getDateTypesAccess().getRule();
	}
	
	///** 
	// * Blob Field Type Rule
	// *  
	// */ blobFieldType:
	//	name=blobTypes constraints+=blobValidators*;
	public BlobFieldTypeElements getBlobFieldTypeAccess() {
		return pBlobFieldType;
	}
	
	public ParserRule getBlobFieldTypeRule() {
		return getBlobFieldTypeAccess().getRule();
	}
	
	///** 
	// * Blob Types Rule
	// *  
	// */ blobTypes:
	//	BLOB
	//	| ANY_BLOB
	//	| IMAGE_BLOB
	//	| TEXT_BLOB;
	public BlobTypesElements getBlobTypesAccess() {
		return pBlobTypes;
	}
	
	public ParserRule getBlobTypesRule() {
		return getBlobTypesAccess().getRule();
	}
	
	///* =========================================================================
	// * VALIDATOR
	// * ========================================================================= */ stringValidators:
	//	required=requiredValidator
	//	| minLenght=minValidator
	//	| maxLenght=maxValidator
	//	| pattern=patternValidator;
	public StringValidatorsElements getStringValidatorsAccess() {
		return pStringValidators;
	}
	
	public ParserRule getStringValidatorsRule() {
		return getStringValidatorsAccess().getRule();
	}
	
	//numericValidators:
	//	required=requiredValidator
	//	| minValue=minValidator
	//	| maxValue=maxValidator;
	public NumericValidatorsElements getNumericValidatorsAccess() {
		return pNumericValidators;
	}
	
	public ParserRule getNumericValidatorsRule() {
		return getNumericValidatorsAccess().getRule();
	}
	
	//blobValidators:
	//	required=requiredValidator
	//	| minBytesValue=minValidator
	//	| maxBytesValue=maxValidator;
	public BlobValidatorsElements getBlobValidatorsAccess() {
		return pBlobValidators;
	}
	
	public ParserRule getBlobValidatorsRule() {
		return getBlobValidatorsAccess().getRule();
	}
	
	//requiredValidator:
	//	REQUIRED;
	public RequiredValidatorElements getRequiredValidatorAccess() {
		return pRequiredValidator;
	}
	
	public ParserRule getRequiredValidatorRule() {
		return getRequiredValidatorAccess().getRule();
	}
	
	//patternValidator:
	//	PATTERN LPAREN PATTERN_VALUE RPAREN;
	public PatternValidatorElements getPatternValidatorAccess() {
		return pPatternValidator;
	}
	
	public ParserRule getPatternValidatorRule() {
		return getPatternValidatorAccess().getRule();
	}
	
	//minValidator:
	//	MIN LPAREN INT RPAREN;
	public MinValidatorElements getMinValidatorAccess() {
		return pMinValidator;
	}
	
	public ParserRule getMinValidatorRule() {
		return getMinValidatorAccess().getRule();
	}
	
	//maxValidator:
	//	MAX LPAREN INT RPAREN;
	public MaxValidatorElements getMaxValidatorAccess() {
		return pMaxValidator;
	}
	
	public ParserRule getMaxValidatorRule() {
		return getMaxValidatorAccess().getRule();
	}
	
	//cardinality:
	//	ONE_TO_MANY
	//	| MANY_TO_ONE
	//	| ONE_TO_ONE
	//	| MANY_TO_MANY;
	public CardinalityElements getCardinalityAccess() {
		return pCardinality;
	}
	
	public ParserRule getCardinalityRule() {
		return getCardinalityAccess().getRule();
	}
	
	//terminal ENTITY_KEYWORD:
	//	'entity';
	public TerminalRule getENTITY_KEYWORDRule() {
		return tENTITY_KEYWORD;
	}
	
	//terminal STRING_KEYWORD:
	//	'String';
	public TerminalRule getSTRING_KEYWORDRule() {
		return tSTRING_KEYWORD;
	}
	
	//terminal INTEGER:
	//	'Integer';
	public TerminalRule getINTEGERRule() {
		return tINTEGER;
	}
	
	//terminal LONG:
	//	'Long';
	public TerminalRule getLONGRule() {
		return tLONG;
	}
	
	//terminal BIG_DECIMAL:
	//	'BigDecimal';
	public TerminalRule getBIG_DECIMALRule() {
		return tBIG_DECIMAL;
	}
	
	//terminal FLOAT:
	//	'Float';
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//terminal DOUBLE:
	//	'Double';
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal BOOLEAN_TYPE:
	//	'Boolean';
	public TerminalRule getBOOLEAN_TYPERule() {
		return tBOOLEAN_TYPE;
	}
	
	//terminal LOCAL_DATE:
	//	'LocalDate';
	public TerminalRule getLOCAL_DATERule() {
		return tLOCAL_DATE;
	}
	
	//terminal ZONED_DATETIME:
	//	'ZonedDateTime';
	public TerminalRule getZONED_DATETIMERule() {
		return tZONED_DATETIME;
	}
	
	//terminal INSTANT:
	//	'Instant';
	public TerminalRule getINSTANTRule() {
		return tINSTANT;
	}
	
	//terminal BLOB:
	//	'Blob';
	public TerminalRule getBLOBRule() {
		return tBLOB;
	}
	
	//terminal ANY_BLOB:
	//	'AnyBlob';
	public TerminalRule getANY_BLOBRule() {
		return tANY_BLOB;
	}
	
	//terminal IMAGE_BLOB:
	//	'ImageBlob';
	public TerminalRule getIMAGE_BLOBRule() {
		return tIMAGE_BLOB;
	}
	
	//terminal TEXT_BLOB:
	//	'TextBlob';
	public TerminalRule getTEXT_BLOBRule() {
		return tTEXT_BLOB;
	}
	
	//terminal ONE_TO_MANY:
	//	'OneToMany';
	public TerminalRule getONE_TO_MANYRule() {
		return tONE_TO_MANY;
	}
	
	//terminal MANY_TO_ONE:
	//	'ManyToOne';
	public TerminalRule getMANY_TO_ONERule() {
		return tMANY_TO_ONE;
	}
	
	//terminal ONE_TO_ONE:
	//	'OneToOne';
	public TerminalRule getONE_TO_ONERule() {
		return tONE_TO_ONE;
	}
	
	//terminal MANY_TO_MANY:
	//	'ManyToMany';
	public TerminalRule getMANY_TO_MANYRule() {
		return tMANY_TO_MANY;
	}
	
	//terminal PATTERN_VALUE:
	//	'"' .* '"';
	public TerminalRule getPATTERN_VALUERule() {
		return tPATTERN_VALUE;
	}
	
	//terminal MIN:
	//	'min';
	public TerminalRule getMINRule() {
		return tMIN;
	}
	
	//terminal MAX:
	//	'max';
	public TerminalRule getMAXRule() {
		return tMAX;
	}
	
	//terminal NULL_LITERAL:
	//	'null';
	public TerminalRule getNULL_LITERALRule() {
		return tNULL_LITERAL;
	}
	
	//terminal LPAREN:
	//	'(';
	public TerminalRule getLPARENRule() {
		return tLPAREN;
	}
	
	//terminal RPAREN:
	//	')';
	public TerminalRule getRPARENRule() {
		return tRPAREN;
	}
	
	//terminal LBRACE:
	//	'{';
	public TerminalRule getLBRACERule() {
		return tLBRACE;
	}
	
	//terminal RBRACE:
	//	'}';
	public TerminalRule getRBRACERule() {
		return tRBRACE;
	}
	
	//terminal LBRACK:
	//	'[';
	public TerminalRule getLBRACKRule() {
		return tLBRACK;
	}
	
	//terminal RBRACK:
	//	']';
	public TerminalRule getRBRACKRule() {
		return tRBRACK;
	}
	
	//terminal SEMI:
	//	';';
	public TerminalRule getSEMIRule() {
		return tSEMI;
	}
	
	//terminal COMMA:
	//	',';
	public TerminalRule getCOMMARule() {
		return tCOMMA;
	}
	
	//terminal DOT:
	//	'.';
	public TerminalRule getDOTRule() {
		return tDOT;
	}
	
	//terminal ELLIPSIS:
	//	'...';
	public TerminalRule getELLIPSISRule() {
		return tELLIPSIS;
	}
	
	//terminal AT:
	//	'@';
	public TerminalRule getATRule() {
		return tAT;
	}
	
	//terminal COLONCOLON:
	//	'::';
	public TerminalRule getCOLONCOLONRule() {
		return tCOLONCOLON;
	}
	
	//terminal SEMICOLON:
	//	':';
	public TerminalRule getSEMICOLONRule() {
		return tSEMICOLON;
	}
	
	//terminal REQUIRED:
	//	'required';
	public TerminalRule getREQUIREDRule() {
		return tREQUIRED;
	}
	
	//terminal PATTERN:
	//	'pattern';
	public TerminalRule getPATTERNRule() {
		return tPATTERN;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
