/**
 * generated by Xtext 2.13.0
 */
package mx.infotec.dads.kukulkan.validation;

import com.google.common.base.Objects;
import mx.infotec.dads.kukulkan.kukulkan.KukulkanPackage;
import mx.infotec.dads.kukulkan.kukulkan.domainModel;
import mx.infotec.dads.kukulkan.kukulkan.entity;
import mx.infotec.dads.kukulkan.kukulkan.entityField;
import mx.infotec.dads.kukulkan.validation.AbstractKukulkanValidator;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class KukulkanValidator extends AbstractKukulkanValidator {
  @Check
  public void checkNameStartsWithUpperCase(final entity entity) {
    boolean _isUpperCase = Character.isUpperCase(entity.getName().charAt(0));
    boolean _not = (!_isUpperCase);
    if (_not) {
      this.warning("Name should start with a capital", KukulkanPackage.Literals.ENTITY__NAME, "invalidName");
    }
  }
  
  @Check
  public void checkTableNameStartsWithLowerCase(final entity entity) {
    boolean _isUpperCase = Character.isUpperCase(entity.getTableName().charAt(0));
    if (_isUpperCase) {
      this.warning("Name should start with a lower case", KukulkanPackage.Literals.ENTITY__TABLE_NAME, "invalidName");
    }
  }
  
  @Check
  public void checkFieldNameIsUniqueInEntity(final entityField field) {
    EObject _eContainer = field.eContainer();
    final entity entity = ((mx.infotec.dads.kukulkan.kukulkan.entity) _eContainer);
    EList<entityField> _fields = entity.getFields();
    for (final entityField otherField : _fields) {
      if ((otherField.getId().equals(field.getId()) && (!Objects.equal(otherField, field)))) {
        this.error("Duplicated field name", KukulkanPackage.Literals.ENTITY_FIELD__ID, "duplicatedFieldName");
      }
    }
  }
  
  @Check
  public void checkEntityNameIsUniqueInModel(final entity entity) {
    EObject _eContainer = entity.eContainer();
    final domainModel domainModel = ((mx.infotec.dads.kukulkan.kukulkan.domainModel) _eContainer);
    EList<mx.infotec.dads.kukulkan.kukulkan.entity> _entities = domainModel.getEntities();
    for (final mx.infotec.dads.kukulkan.kukulkan.entity extEntity : _entities) {
      if ((extEntity.getName().equals(entity.getName()) && (!Objects.equal(extEntity, entity)))) {
        this.error("Duplicated entity name", KukulkanPackage.Literals.ENTITY__NAME, "duplicatedEntityName");
      }
    }
  }
  
  @Check
  public void checkTableNameIsUniqueInModel(final entity entity) {
    EObject _eContainer = entity.eContainer();
    final domainModel domainModel = ((mx.infotec.dads.kukulkan.kukulkan.domainModel) _eContainer);
    EList<mx.infotec.dads.kukulkan.kukulkan.entity> _entities = domainModel.getEntities();
    for (final mx.infotec.dads.kukulkan.kukulkan.entity otherEntity : _entities) {
      if ((otherEntity.getTableName().equals(entity.getTableName()) && (!Objects.equal(otherEntity, entity)))) {
        this.error("Duplicated table name", KukulkanPackage.Literals.ENTITY__TABLE_NAME, "duplicatedTableName");
      }
    }
  }
}
