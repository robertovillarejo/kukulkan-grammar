/*
 * generated by Xtext 2.13.0
 */
package mx.infotec.dads.kukulkan.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import mx.infotec.dads.kukulkan.ide.contentassist.antlr.internal.InternalKukulkanParser;
import mx.infotec.dads.kukulkan.services.KukulkanGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class KukulkanParser extends AbstractContentAssistParser {

	@Inject
	private KukulkanGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalKukulkanParser createParser() {
		InternalKukulkanParser result = new InternalKukulkanParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getEntityFieldAccess().getAlternatives(), "rule__EntityField__Alternatives");
					put(grammarAccess.getFieldTypeAccess().getAlternatives(), "rule__FieldType__Alternatives");
					put(grammarAccess.getNumericTypesAccess().getAlternatives(), "rule__NumericTypes__Alternatives");
					put(grammarAccess.getDateTypesAccess().getAlternatives(), "rule__DateTypes__Alternatives");
					put(grammarAccess.getBlobTypesAccess().getAlternatives(), "rule__BlobTypes__Alternatives");
					put(grammarAccess.getStringValidatorsAccess().getAlternatives(), "rule__StringValidators__Alternatives");
					put(grammarAccess.getNumericValidatorsAccess().getAlternatives(), "rule__NumericValidators__Alternatives");
					put(grammarAccess.getBlobValidatorsAccess().getAlternatives(), "rule__BlobValidators__Alternatives");
					put(grammarAccess.getCardinalityAccess().getAlternatives(), "rule__Cardinality__Alternatives");
					put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
					put(grammarAccess.getEntityAccess().getGroup_2(), "rule__Entity__Group_2__0");
					put(grammarAccess.getEntityAccess().getGroup_3(), "rule__Entity__Group_3__0");
					put(grammarAccess.getEntityAccess().getGroup_3_1(), "rule__Entity__Group_3_1__0");
					put(grammarAccess.getEntityAccess().getGroup_3_1_1(), "rule__Entity__Group_3_1_1__0");
					put(grammarAccess.getPrimitiveFieldAccess().getGroup(), "rule__PrimitiveField__Group__0");
					put(grammarAccess.getAssociationFieldAccess().getGroup(), "rule__AssociationField__Group__0");
					put(grammarAccess.getAssociationFieldAccess().getGroup_1(), "rule__AssociationField__Group_1__0");
					put(grammarAccess.getStringFieldTypeAccess().getGroup(), "rule__StringFieldType__Group__0");
					put(grammarAccess.getNumericFieldTypeAccess().getGroup(), "rule__NumericFieldType__Group__0");
					put(grammarAccess.getBooleanFieldTypeAccess().getGroup(), "rule__BooleanFieldType__Group__0");
					put(grammarAccess.getDateFieldTypeAccess().getGroup(), "rule__DateFieldType__Group__0");
					put(grammarAccess.getBlobFieldTypeAccess().getGroup(), "rule__BlobFieldType__Group__0");
					put(grammarAccess.getPatternValidatorAccess().getGroup(), "rule__PatternValidator__Group__0");
					put(grammarAccess.getMinValidatorAccess().getGroup(), "rule__MinValidator__Group__0");
					put(grammarAccess.getMaxValidatorAccess().getGroup(), "rule__MaxValidator__Group__0");
					put(grammarAccess.getDomainModelAccess().getEntitiesAssignment(), "rule__DomainModel__EntitiesAssignment");
					put(grammarAccess.getEntityAccess().getNameAssignment_1(), "rule__Entity__NameAssignment_1");
					put(grammarAccess.getEntityAccess().getTableNameAssignment_2_1(), "rule__Entity__TableNameAssignment_2_1");
					put(grammarAccess.getEntityAccess().getFieldsAssignment_3_1_0(), "rule__Entity__FieldsAssignment_3_1_0");
					put(grammarAccess.getEntityAccess().getFieldsAssignment_3_1_1_1(), "rule__Entity__FieldsAssignment_3_1_1_1");
					put(grammarAccess.getPrimitiveFieldAccess().getIdAssignment_0(), "rule__PrimitiveField__IdAssignment_0");
					put(grammarAccess.getPrimitiveFieldAccess().getTypeAssignment_2(), "rule__PrimitiveField__TypeAssignment_2");
					put(grammarAccess.getAssociationFieldAccess().getTypeAssignment_0(), "rule__AssociationField__TypeAssignment_0");
					put(grammarAccess.getAssociationFieldAccess().getToSourcePropertyNameAssignment_1_1(), "rule__AssociationField__ToSourcePropertyNameAssignment_1_1");
					put(grammarAccess.getAssociationFieldAccess().getIdAssignment_2(), "rule__AssociationField__IdAssignment_2");
					put(grammarAccess.getAssociationFieldAccess().getTargetEntityAssignment_4(), "rule__AssociationField__TargetEntityAssignment_4");
					put(grammarAccess.getStringFieldTypeAccess().getNameAssignment_0(), "rule__StringFieldType__NameAssignment_0");
					put(grammarAccess.getStringFieldTypeAccess().getConstraintsAssignment_1(), "rule__StringFieldType__ConstraintsAssignment_1");
					put(grammarAccess.getNumericFieldTypeAccess().getNameAssignment_0(), "rule__NumericFieldType__NameAssignment_0");
					put(grammarAccess.getNumericFieldTypeAccess().getConstraintsAssignment_1(), "rule__NumericFieldType__ConstraintsAssignment_1");
					put(grammarAccess.getBooleanFieldTypeAccess().getNameAssignment_0(), "rule__BooleanFieldType__NameAssignment_0");
					put(grammarAccess.getBooleanFieldTypeAccess().getRequiredAssignment_1(), "rule__BooleanFieldType__RequiredAssignment_1");
					put(grammarAccess.getDateFieldTypeAccess().getTypeAssignment_0(), "rule__DateFieldType__TypeAssignment_0");
					put(grammarAccess.getDateFieldTypeAccess().getRequiredAssignment_1(), "rule__DateFieldType__RequiredAssignment_1");
					put(grammarAccess.getBlobFieldTypeAccess().getNameAssignment_0(), "rule__BlobFieldType__NameAssignment_0");
					put(grammarAccess.getBlobFieldTypeAccess().getConstraintsAssignment_1(), "rule__BlobFieldType__ConstraintsAssignment_1");
					put(grammarAccess.getStringValidatorsAccess().getRequiredAssignment_0(), "rule__StringValidators__RequiredAssignment_0");
					put(grammarAccess.getStringValidatorsAccess().getMinLenghtAssignment_1(), "rule__StringValidators__MinLenghtAssignment_1");
					put(grammarAccess.getStringValidatorsAccess().getMaxLenghtAssignment_2(), "rule__StringValidators__MaxLenghtAssignment_2");
					put(grammarAccess.getStringValidatorsAccess().getPatternAssignment_3(), "rule__StringValidators__PatternAssignment_3");
					put(grammarAccess.getNumericValidatorsAccess().getRequiredAssignment_0(), "rule__NumericValidators__RequiredAssignment_0");
					put(grammarAccess.getNumericValidatorsAccess().getMinValueAssignment_1(), "rule__NumericValidators__MinValueAssignment_1");
					put(grammarAccess.getNumericValidatorsAccess().getMaxValueAssignment_2(), "rule__NumericValidators__MaxValueAssignment_2");
					put(grammarAccess.getBlobValidatorsAccess().getRequiredAssignment_0(), "rule__BlobValidators__RequiredAssignment_0");
					put(grammarAccess.getBlobValidatorsAccess().getMinBytesValueAssignment_1(), "rule__BlobValidators__MinBytesValueAssignment_1");
					put(grammarAccess.getBlobValidatorsAccess().getMaxBytesValueAssignment_2(), "rule__BlobValidators__MaxBytesValueAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public KukulkanGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(KukulkanGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
