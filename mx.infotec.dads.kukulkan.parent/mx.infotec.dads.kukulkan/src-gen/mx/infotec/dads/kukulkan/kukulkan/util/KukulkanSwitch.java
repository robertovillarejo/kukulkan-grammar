/**
 * generated by Xtext 2.13.0
 */
package mx.infotec.dads.kukulkan.kukulkan.util;

import mx.infotec.dads.kukulkan.kukulkan.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see mx.infotec.dads.kukulkan.kukulkan.KukulkanPackage
 * @generated
 */
public class KukulkanSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static KukulkanPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public KukulkanSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = KukulkanPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case KukulkanPackage.DOMAIN_MODEL:
      {
        domainModel domainModel = (domainModel)theEObject;
        T result = casedomainModel(domainModel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KukulkanPackage.ENTITY:
      {
        entity entity = (entity)theEObject;
        T result = caseentity(entity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KukulkanPackage.ENTITY_FIELD:
      {
        entityField entityField = (entityField)theEObject;
        T result = caseentityField(entityField);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KukulkanPackage.PRIMITIVE_FIELD:
      {
        primitiveField primitiveField = (primitiveField)theEObject;
        T result = caseprimitiveField(primitiveField);
        if (result == null) result = caseentityField(primitiveField);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KukulkanPackage.FIELD_TYPE:
      {
        fieldType fieldType = (fieldType)theEObject;
        T result = casefieldType(fieldType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KukulkanPackage.ASSOCIATION_FIELD:
      {
        associationField associationField = (associationField)theEObject;
        T result = caseassociationField(associationField);
        if (result == null) result = caseentityField(associationField);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KukulkanPackage.STRING_FIELD_TYPE:
      {
        stringFieldType stringFieldType = (stringFieldType)theEObject;
        T result = casestringFieldType(stringFieldType);
        if (result == null) result = casefieldType(stringFieldType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KukulkanPackage.NUMERIC_FIELD_TYPE:
      {
        numericFieldType numericFieldType = (numericFieldType)theEObject;
        T result = casenumericFieldType(numericFieldType);
        if (result == null) result = casefieldType(numericFieldType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KukulkanPackage.BOOLEAN_FIELD_TYPE:
      {
        booleanFieldType booleanFieldType = (booleanFieldType)theEObject;
        T result = casebooleanFieldType(booleanFieldType);
        if (result == null) result = casefieldType(booleanFieldType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KukulkanPackage.DATE_FIELD_TYPE:
      {
        dateFieldType dateFieldType = (dateFieldType)theEObject;
        T result = casedateFieldType(dateFieldType);
        if (result == null) result = casefieldType(dateFieldType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KukulkanPackage.BLOB_FIELD_TYPE:
      {
        blobFieldType blobFieldType = (blobFieldType)theEObject;
        T result = caseblobFieldType(blobFieldType);
        if (result == null) result = casefieldType(blobFieldType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KukulkanPackage.STRING_VALIDATORS:
      {
        stringValidators stringValidators = (stringValidators)theEObject;
        T result = casestringValidators(stringValidators);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KukulkanPackage.NUMERIC_VALIDATORS:
      {
        numericValidators numericValidators = (numericValidators)theEObject;
        T result = casenumericValidators(numericValidators);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KukulkanPackage.BLOB_VALIDATORS:
      {
        blobValidators blobValidators = (blobValidators)theEObject;
        T result = caseblobValidators(blobValidators);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>domain Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>domain Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedomainModel(domainModel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>entity</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>entity</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseentity(entity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>entity Field</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>entity Field</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseentityField(entityField object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>primitive Field</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>primitive Field</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseprimitiveField(primitiveField object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>field Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>field Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefieldType(fieldType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>association Field</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>association Field</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseassociationField(associationField object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>string Field Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>string Field Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestringFieldType(stringFieldType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>numeric Field Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>numeric Field Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casenumericFieldType(numericFieldType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>boolean Field Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>boolean Field Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casebooleanFieldType(booleanFieldType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>date Field Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>date Field Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedateFieldType(dateFieldType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>blob Field Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>blob Field Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseblobFieldType(blobFieldType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>string Validators</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>string Validators</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestringValidators(stringValidators object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>numeric Validators</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>numeric Validators</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casenumericValidators(numericValidators object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>blob Validators</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>blob Validators</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseblobValidators(blobValidators object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //KukulkanSwitch
