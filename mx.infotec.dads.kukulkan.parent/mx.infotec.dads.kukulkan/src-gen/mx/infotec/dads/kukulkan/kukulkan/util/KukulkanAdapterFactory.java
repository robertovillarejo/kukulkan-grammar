/**
 * generated by Xtext 2.13.0
 */
package mx.infotec.dads.kukulkan.kukulkan.util;

import mx.infotec.dads.kukulkan.kukulkan.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see mx.infotec.dads.kukulkan.kukulkan.KukulkanPackage
 * @generated
 */
public class KukulkanAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static KukulkanPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public KukulkanAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = KukulkanPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected KukulkanSwitch<Adapter> modelSwitch =
    new KukulkanSwitch<Adapter>()
    {
      @Override
      public Adapter casedomainModel(domainModel object)
      {
        return createdomainModelAdapter();
      }
      @Override
      public Adapter caseentity(entity object)
      {
        return createentityAdapter();
      }
      @Override
      public Adapter caseentityField(entityField object)
      {
        return createentityFieldAdapter();
      }
      @Override
      public Adapter caseprimitiveField(primitiveField object)
      {
        return createprimitiveFieldAdapter();
      }
      @Override
      public Adapter casefieldType(fieldType object)
      {
        return createfieldTypeAdapter();
      }
      @Override
      public Adapter caseassociationField(associationField object)
      {
        return createassociationFieldAdapter();
      }
      @Override
      public Adapter casestringFieldType(stringFieldType object)
      {
        return createstringFieldTypeAdapter();
      }
      @Override
      public Adapter casenumericFieldType(numericFieldType object)
      {
        return createnumericFieldTypeAdapter();
      }
      @Override
      public Adapter casebooleanFieldType(booleanFieldType object)
      {
        return createbooleanFieldTypeAdapter();
      }
      @Override
      public Adapter casedateFieldType(dateFieldType object)
      {
        return createdateFieldTypeAdapter();
      }
      @Override
      public Adapter caseblobFieldType(blobFieldType object)
      {
        return createblobFieldTypeAdapter();
      }
      @Override
      public Adapter casestringValidators(stringValidators object)
      {
        return createstringValidatorsAdapter();
      }
      @Override
      public Adapter casenumericValidators(numericValidators object)
      {
        return createnumericValidatorsAdapter();
      }
      @Override
      public Adapter caseblobValidators(blobValidators object)
      {
        return createblobValidatorsAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link mx.infotec.dads.kukulkan.kukulkan.domainModel <em>domain Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mx.infotec.dads.kukulkan.kukulkan.domainModel
   * @generated
   */
  public Adapter createdomainModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mx.infotec.dads.kukulkan.kukulkan.entity <em>entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mx.infotec.dads.kukulkan.kukulkan.entity
   * @generated
   */
  public Adapter createentityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mx.infotec.dads.kukulkan.kukulkan.entityField <em>entity Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mx.infotec.dads.kukulkan.kukulkan.entityField
   * @generated
   */
  public Adapter createentityFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mx.infotec.dads.kukulkan.kukulkan.primitiveField <em>primitive Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mx.infotec.dads.kukulkan.kukulkan.primitiveField
   * @generated
   */
  public Adapter createprimitiveFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mx.infotec.dads.kukulkan.kukulkan.fieldType <em>field Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mx.infotec.dads.kukulkan.kukulkan.fieldType
   * @generated
   */
  public Adapter createfieldTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mx.infotec.dads.kukulkan.kukulkan.associationField <em>association Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mx.infotec.dads.kukulkan.kukulkan.associationField
   * @generated
   */
  public Adapter createassociationFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mx.infotec.dads.kukulkan.kukulkan.stringFieldType <em>string Field Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mx.infotec.dads.kukulkan.kukulkan.stringFieldType
   * @generated
   */
  public Adapter createstringFieldTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mx.infotec.dads.kukulkan.kukulkan.numericFieldType <em>numeric Field Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mx.infotec.dads.kukulkan.kukulkan.numericFieldType
   * @generated
   */
  public Adapter createnumericFieldTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mx.infotec.dads.kukulkan.kukulkan.booleanFieldType <em>boolean Field Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mx.infotec.dads.kukulkan.kukulkan.booleanFieldType
   * @generated
   */
  public Adapter createbooleanFieldTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mx.infotec.dads.kukulkan.kukulkan.dateFieldType <em>date Field Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mx.infotec.dads.kukulkan.kukulkan.dateFieldType
   * @generated
   */
  public Adapter createdateFieldTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mx.infotec.dads.kukulkan.kukulkan.blobFieldType <em>blob Field Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mx.infotec.dads.kukulkan.kukulkan.blobFieldType
   * @generated
   */
  public Adapter createblobFieldTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mx.infotec.dads.kukulkan.kukulkan.stringValidators <em>string Validators</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mx.infotec.dads.kukulkan.kukulkan.stringValidators
   * @generated
   */
  public Adapter createstringValidatorsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mx.infotec.dads.kukulkan.kukulkan.numericValidators <em>numeric Validators</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mx.infotec.dads.kukulkan.kukulkan.numericValidators
   * @generated
   */
  public Adapter createnumericValidatorsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mx.infotec.dads.kukulkan.kukulkan.blobValidators <em>blob Validators</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mx.infotec.dads.kukulkan.kukulkan.blobValidators
   * @generated
   */
  public Adapter createblobValidatorsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //KukulkanAdapterFactory
